Basics

scheme Requirements  =
extend Basics with 
class
  value /* requirement spec */
    plan : Families -~-> Plan
    plan(fs) as p 
    post isCorrectPlan(p, fs)
    pre isWellformed(fs),

    isCorrectPlan : Plan >< Families -> Bool,
    isCorrectPlan(p, fs) is,
    
    isWellformedTable : Table >< Families -> Bool
    isWellformedTable(t, fs) is card t = 1 \/
    		      	     (t ~= {} /\ (all p : Person :- p isin t =>
    		      	     	      	      (all p' : Person :- p' isin t /\ p ~= p' =>
				     	      	   (exists! f : Family :- f isin fs /\ p isin f /\ p' isin f
				     		   )
					      )
					 )
    		      	     ),
			     
    isWellformed : Families -> Bool
    isWellformed(fs) is fs ~= {} /\ (all f : Family :- f isin fs /\ f ~= {} =>
    		     	     (all f' : Family :- f' isin fs /\ f' ~= {} /\ f ~= f' =>
			     	  (all p : Person :- p isin f /\ p ~isin f'
				  )
			     )
			)
 end
