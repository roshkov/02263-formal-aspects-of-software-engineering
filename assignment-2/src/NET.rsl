scheme NET =
class
  type 
    Net :: stops : Stops
    	   connections : Connections, -- tram nets
    Headway = Time, -- minimum headways
    DrivingTime = Time, -- minimum driving times
    Time = Nat, -- times in number of minutes
    Capacity = Nat, -- capacities
    StopId = Text,  -- names of stops
    Stops = StopId -m-> Capacity,
    Connection :: fromStop : StopId
		  toStop : StopId
    	       	  headway : Headway
		  capacity : Capacity
		  minDrivingTime : DrivingTime,
    Connections = StopId -m-> Connection-set
  value /* generators */

    empty_Stops : Stops = [], -- the empty stops

    empty_Connections : Connections = [], -- the empty connection

    empty : Net = mk_Net(empty_Stops, empty_Connections),   -- the empty net

    -- insert a stop with a given name and capacity 
    insertStop : StopId >< Capacity >< Net -> Net
    insertStop(s, c, n) is mk_Net(stops(n) !! [s +> c], connections(n)),
    
    -- add a connection between given stops, 
    -- with the given minimum headway, capacity and minimum driving time
    addConnection : StopId >< StopId  >< Headway >< Capacity >< DrivingTime >< Net -> Net
    addConnection(s1, s2, h, c, d, n) is
    		      if s1 isin dom(connections(n)) /\ s2 isin dom(connections(n)) then
		      	 mk_Net(stops(n), connections(n) !!
			 		  [s1 +> (connections(n)(s1) union {mk_Connection(s1,s2,h,c,d)})] !!
					  [s2 +> (connections(n)(s2) union {mk_Connection(s2,s1,h,c,d)})])
		      elsif s1 isin dom(connections(n)) /\ s2 ~isin dom(connections(n)) then
			 mk_Net(stops(n), connections(n) !!
					  [s1 +> (connections(n)(s1) union {mk_Connection(s1,s2,h,c,d)})] !!
					  [s2 +> {mk_Connection(s2,s1,h,c,d)}])
		      elsif s1 ~isin dom(connections(n)) /\ s2 isin dom(connections(n)) then
			 mk_Net(stops(n), connections(n) !!
			  		  [s1 +> {mk_Connection(s1,s2,h,c,d)}] !!
					  [s2 +> (connections(n)(s2) union {mk_Connection(s2,s1,h,c,d)})])
		       else
			 mk_Net(stops(n), connections(n) !!
					  [s1 +> {mk_Connection(s1,s2,h,c,d)}] !!
					  [s2 +> {mk_Connection(s2,s1,h,c,d)}]) end	

  value /* observers */

    -- check whether a stop is in a network     
    isIn : StopId >< Net -> Bool
    isIn(s, n) is s isin dom(stops(n)),
 
    -- get the capacity of a stop 
    capacity : StopId >< Net -~-> Capacity
    capacity(s, n) is stops(n)(s)
/*
    -- check whether two stops are directly connected in a network        
    areDirectlyConnected : StopId >< StopId >< Net -> Bool
    ,

    -- get minimum headway between two connected stops        
    minHeadway : StopId >< StopId >< Net -~-> Headway
    ..., 

    -- get the capacity for a connection between two connected stops
    capacity : StopId >< StopId >< Net -~-> Capacity
    ...,
 
    -- get minimum driving time between two connected stops        
    minDrivingTime : StopId >< StopId >< Net -~-> DrivingTime
    ...
   */
 
  --value /* predicates to check nets */
  /*
    isWellformed : Net -> Bool
    isWellformed(n) is ...
  */
end  
