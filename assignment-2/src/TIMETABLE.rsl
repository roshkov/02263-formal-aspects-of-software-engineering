NET
scheme TIMETABLE = extend NET with
class
  type
    TimeTable = TramId -m-> TimeSlot-list, -- time tables
    TramId = Text, -- tram names
    TimeSlot 	  :: stopId     : StopId
    	     	     arrival    : Time
		     departure  : Time,
    ConnId 	  :: from       : StopId
    	     	     to         : StopId, -- connection names
    ScheduleSlots :: arrivals   : Time-list
    	       	     departures : Time-list,
    ScheduleConn = ConnId -m-> ScheduleSlots,
    ScheduleStop = StopId -m-> ScheduleSlots

    value /* generators */
      -- the an empty timetable
      empty : TimeTable = [],

      -- add to a time table an empty plan for a new tram
      addTram : TramId >< TimeTable -> TimeTable
      addTram(tId, tt) is tt !! [tId +> <..>],

      -- add a stop with arrival time and departure time to the plan for a given tram
      addStop : TramId >< StopId >< Time >< Time >< TimeTable -> TimeTable
      addStop(tId, sId, a, d, tt) is tt !! [tId +> tt(tId)^<.mk_TimeSlot(sId, a, d).>],

      createScheduleConn : TimeTable -> ScheduleConn
      createScheduleConn(tt) is createScheduleConnRec(dom(tt), [], tt),

      createScheduleConnRec : TramId-set >< ScheduleConn >< TimeTable -> ScheduleConn
      createScheduleConnRec(trams, sc, tt) is if card(trams) = 1 then
                                             createScheduleConnForTimeSlots(tt(hd(trams)), sc)
                                          else
                                             let
                                                 tram = hd(trams),
                                                 trams' = trams \ {tram}
                                             in
                                                 createScheduleConnRec(trams', createScheduleConnForTimeSlots(tt(tram), sc), tt)
                                             end
                                          end,

      createScheduleConnForTimeSlots : TimeSlot-list >< ScheduleConn -> ScheduleConn
      createScheduleConnForTimeSlots(tsl, sc) is if len(tsl) < 2 then -- Needs two trains to create an ScheduleSlot
      				       	      	  sc
					      elsif len(tsl) = 2 then
					      	  insertScheduleSlot(hd(tsl), hd(tl(tsl)) ,sc)
					      else
						  let
						      tsFrom = hd(tsl),
						      tsTo = hd(tl(tsl)),
						      tsl' = tl(tsl) -- Only remove first TimeSlot from the list
						  in
						      createScheduleConnForTimeSlots(tsl', insertScheduleSlot(tsFrom, tsTo, sc))
						  end
					      end,

      insertScheduleSlot : TimeSlot >< TimeSlot >< ScheduleConn -> ScheduleConn
      insertScheduleSlot(tsFrom, tsTo, sc) is let
      				       	          connId = mk_ConnId(stopId(tsFrom), stopId(tsTo)),
						  arr = departure(tsFrom), -- Arrival on connection
						  dep = arrival(tsTo) -- Departure of connection 
				    	      in
						  if isInSchedule(connId, sc) then
						      sc !! [connId +> mk_ScheduleSlots(arrivals(sc(connId)) ^ <.arr.>,
						     		          	        departures(sc(connId)) ^ <.dep.>)]
						  else
						      sc !! [connId +> mk_ScheduleSlots(<.arr.>, <.dep.>)]
						  end
				              end,

      createScheduleStop : TimeTable -> ScheduleStop
      createScheduleStop(tt) is createScheduleStopRec(dom(tt), [], tt),

      createScheduleStopRec : TramId-set >< ScheduleStop >< TimeTable -> ScheduleStop
      createScheduleStopRec(trams, ss, tt) is if card(trams) = 1 then
				    	     createScheduleStopForTimeSlots(tt(hd(trams)), ss)
					 else
					     let
					         tram = hd(trams),
					   	 trams' = trams \ {tram}
					     in
						 createScheduleStopRec(trams', createScheduleStopForTimeSlots(tt(tram), ss), tt)
					     end
					 end,

      createScheduleStopForTimeSlots : TimeSlot-list >< ScheduleStop -> ScheduleStop
      createScheduleStopForTimeSlots(tsl, ss) is if len(tsl) = 0 then
      				       	      	  ss
					      elsif len(tsl) = 1 then
					      	  insertScheduleSlot(hd(tsl), ss)
					      else
						  let
						      ts = hd(tsl),
						      tsl' = tl(tsl)
						  in
						      createScheduleStopForTimeSlots(tsl', insertScheduleSlot(ts, ss))
						  end
					      end,
					      
     insertScheduleSlot : TimeSlot >< ScheduleStop -> ScheduleStop
     insertScheduleSlot(ts, ss) is if isInSchedule(stopId(ts), ss) then
				        let
					    stopId = stopId(ts),
					    scheduleSlots = ss(stopId)
					in
					    ss !! [stopId +> mk_ScheduleSlots(arrivals(scheduleSlots) ^
					       	  	     		      <.arrival(ts).>,
									      departures(scheduleSlots) ^
									      <.departure(ts).>)]
					end
				    else
					ss !! [stopId(ts) +> mk_ScheduleSlots(<.arrival(ts).>, <.departure(ts).>)]
				    end

  value /* observers */
     -- check whether a tram with a given name exists in a given time table
     isIn : TramId >< TimeTable -> Bool
     isIn(tId, tt) is tId isin dom(tt),

     isInSchedule : StopId >< ScheduleStop -> Bool
     isInSchedule(stopId, ss) is stopId isin dom(ss),

     isInSchedule : ConnId >< ScheduleConn -> Bool
     isInSchedule(connId, sc) is connId isin dom(sc),

     findMaxCapacity : Time-list >< Time-list -> Int
     findMaxCapacity(arrs, deps) is findMaxCapacityRec(sort(arrs), sort(deps), 0, 0),

     findMaxCapacityRec : Time-list >< Time-list >< Int >< Int -> Int
     findMaxCapacityRec(sArr, sDep, curO, maxO) is if len(sArr) > 0 /\ len(sDep) > 0 then
     			  	   	    	         if hd(sArr) < hd(sDep) then
							     if curO + 1 > maxO then
							         findMaxCapacityRec(tl(sArr), sDep, curO+1, curO+1)
							     else
							         findMaxCapacityRec(tl(sArr), sDep, curO+1, maxO)
							     end
							 else
							     findMaxCapacityRec(sArr, tl(sDep), curO-1, maxO)
							 end
						     else
						         maxO
						     end
     pre isSorted(sArr) /\ isSorted(sDep),

     sort : Time-list -> Time-list
     sort(tList) is if len(tList) <= 1 then
      		       	      tList
			  else
			      sort(getSmallerItems(tl(tList), hd(tList))) ^
			      <.hd(tList).> ^
			      sort(getLargerItems(tl(tList), hd(tList)))
			  end as sortedList
     post isSorted(sortedList),

     getLargerItems : Time-list >< Time -> Time-list
     getLargerItems(tList, t) is if len(tList) = 0 then
      			       	      <..>
				  elsif len(tList) = 1 /\ hd(tList) > t then
      			       	      <.hd(tList).>
				  elsif hd(tList) > t then
				      <.hd(tList).>^getLargerItems(tl(tList),t)
				  else
				      getLargerItems(tl(tList),t)
				  end,

     getSmallerItems : Time-list >< Time -> Time-list
     getSmallerItems(tList, t) is if len(tList) = 0 then
      			       	      <..>
				   elsif len(tList) = 1 /\ hd(tList) <= t then
      			       	      <.hd(tList).>
				   elsif hd(tList) <= t then
				       <.hd(tList).>^getSmallerItems(tl(tList),t)
				   else
				       getSmallerItems(tl(tList),t)
				   end,
     isSorted : Time-list -> Bool
     isSorted(tList) is (all i : Nat :- i isin inds(tList) =>
     			     (all i' : Nat :- i' isin inds(tList) /\ i < i' =>
			         tList(i) <= tList(i)
			     )
     			 )
			 
  value /* predicates to check time tables */

     hasCorrectTimes : TimeSlot-list -> Bool
     hasCorrectTimes(tsl) is if len(tsl) < 2 then
     			         -- Check last stations times
				 arrival(hd(tsl)) <= departure(hd(tsl))
			     else
				 let
				     res = -- Check connection time
			         	   departure(hd(tsl)) <= arrival(hd(tl(tsl))) /\
				 	   -- Check to and from stations times
				 	   arrival(hd(tsl)) <= departure(hd(tsl)) /\
				 	   arrival(hd(tl(tsl))) <= departure(hd(tl(tsl)))
				 in
				     if res then
				         hasCorrectTimes(tl(tsl))
				     else
				         false
				     end
				 end
			     end,

     hasCorrectTimes : TimeTable -> Bool
     hasCorrectTimes(timeTable) is (all tram : TramId :- tram isin dom(timeTable) =>
     				       hasCorrectTimes(timeTable(tram))
     				   ),

     allStopsInNet : ScheduleStop >< Net -> Bool
     allStopsInNet(scheduleStop, n) is (all sId : StopId :- sId isin dom(scheduleStop) =>
     				           isIn(sId, n)
     				       ),

     noIndirectConnections : ScheduleConn >< Net -> Bool
     noIndirectConnections(scheduleConn, n) is (all cId : ConnId :- cId isin dom(scheduleConn) =>
     					           hasDirectConnection(from(cId), to(cId), n)
     					       ),

     noStopCapacityExceeded : ScheduleStop >< Net -> Bool
     noStopCapacityExceeded(scheduleStop, n) is (all sId : StopId :- sId isin dom(scheduleStop) =>
     					      	    let
						        arrs = arrivals(scheduleStop(sId)),
						      	deps = departures(scheduleStop(sId))
						    in
						        findMaxCapacity(arrs, deps) <= capacity(sId, n)
						    end
     					        ),

     noConnectionCapacityExceeded : ScheduleConn >< Net -> Bool
     noConnectionCapacityExceeded(scheduleConn, n) is (all c : ConnId :- c isin dom(scheduleConn) =>
     						       	  let
							      arrs = arrivals(scheduleConn(c)),
							      deps = departures(scheduleConn(c))
							  in
							      findMaxCapacity(arrs, deps) <= capacity(from(c), to(c), n)
							  end
     						      ),

     noHeadwayViolation : ConnId >< Time-list >< Net -> Bool
     noHeadwayViolation(connId, tList, n) is (all i : Nat :- i isin inds(tList) =>
     					        (all i' : Nat :- i' isin inds(tList) /\ i < i' =>
					    	    tList(i') - tList(i) >= minHeadway(from(connId), to(connId),n)
					    	)
     					    )
     pre isSorted(tList),

     noHeadwayViolation : ScheduleConn >< Net -> Bool
     noHeadwayViolation(scheduleConn, n) is (all c : ConnId :- c isin dom(scheduleConn) =>
     				       	        noHeadwayViolation(c, sort(departures(scheduleConn(c))),n) /\
						noHeadwayViolation(c, sort(arrivals(scheduleConn(c))),n)
     				       	    ),

     noDrivingTimeExceeded : ScheduleConn >< Net -> Bool
     noDrivingTimeExceeded(scheduleConn, n) is (all c : ConnId :- c isin dom(scheduleConn) =>
						     let
							arrs = arrivals(scheduleConn(c)),
							deps = departures(scheduleConn(c))
						     in
							 (all i : Nat :- i isin inds(arrs) /\ len(arrs) = len(deps) =>
						     	     arrs(i) - deps(i) <= minDrivingTime(from(c), to(c), n)
						     	 )
						     end
     					     	),

     isWellformed : TimeTable >< Net -> Bool
     isWellformed(timeTable, n) is hasCorrectTimes(timeTable) /\
     			     	   let
				       scheduleConn = createScheduleConn(timeTable),
				       scheduleStop = createScheduleStop(timeTable)
				   in
				       allStopsInNet(scheduleStop, n) /\
				       noIndirectConnections(scheduleConn, n) /\
				       noStopCapacityExceeded(scheduleStop, n) /\
     		     	  	       noConnectionCapacityExceeded(scheduleConn, n) /\
			   	       noHeadwayViolation(scheduleConn, n) /\
			   	       noDrivingTimeExceeded(scheduleConn, n)
			   	   end
     pre isWellformed(n)

end
