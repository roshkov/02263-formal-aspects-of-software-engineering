NET
scheme TIMETABLE = extend NET with
class
  type 
    TimeTable = TramId -m-> TimeSlot-list, -- time tables
    TimeSlot :: stopId 	  : StopId
    	     	arrival   : Time
		departure : Time,
    TramId = Text, -- tram names
    ConId :: from : StopId
    	     to   : StopId, -- connection names
    ScheduleSlotsList :: arrivals   : Time-list
    	       	      	 departures : Time-list,
    ScheduleTable = ConId -m-> ScheduleSlotsList, -- Arrival and departure times. index i in the two lists should correspond to the same connection, i.e. they should not be sorted but ordered.
    StopsTable = StopId -m-> ScheduleSlotsList

    value /* generators */
      -- the an empty timetable
      empty : TimeTable = [],

      -- add to a time table an empty plan for a new tram
      addTram : TramId >< TimeTable -> TimeTable
      addTram(tId, tt) is tt !! [tId +> <..>],

      -- add a stop with arrival time and departure time to the plan for a given tram
      addStop : TramId >< StopId >< Time >< Time >< TimeTable -> TimeTable
      addStop(tId, sId, a, d, tt) is tt !! [tId +> tt(tId)^<.mk_TimeSlot(sId, a, d).>],
      /*
      createStopsTable: TimeTable -> read any StopsTable
      createStopsTable(tt) is local
				variable
				    table : StopsTable := [],
				    tIds: TramId-set := dom(tt),
			    	    tId : TramId := hd(tIds)
			      in
				while card(tIds) > 0 do
				    for ts in tt(tId) do
				    	table := table !! [stopId(ts) +> table(stopId(ts))^<.mk_ScheduleSlot(departure(ts), arrival(ts)).>]
			  	    end;
				    tIds := tIds \ {tId};
				    tId := hd(tIds)
				end;
				table
		              end,
      */
/*
      createScheduleTable: TimeTable >< TramId -> read any ScheduleTable
      createScheduleTable(tt,tramId) is local
				variable
				    table : ScheduleTable := [],
				    tIds: TramId-set := dom(tt),
				    --tIds : TramId-set := tramIds,
				    --tId : TramId := hd(tIds)
			     	    tId : TramId := tramId
			     in
				while card(tIds) > 0 do
				    for ts in tt(tId) do
				    	if tId isin dom(table) then
					    table := table !! [conId(ts) +> table(conId(ts))^<.mk_ScheduleSlotsList(<.arrival(ts).>,<.departure(ts).>).>]
					else
					    table := table !! [stopId(ts) +> table(stopId(ts))^<.mk_ScheduleSlot(departure(ts), arrival(ts)).>]
					end				    	
			  	    end;
				    tIds := tIds \ {tId};
				    tId := hd(tIds)
				end;
				table
		              end,
*/
      getLargerItems : Time-list >< Time -> Time-list
      getLargerItems(tList, t) is if len(tList) = 0 then
      			       	      <..>
				  elsif len(tList) = 1 /\ hd(tList) > t then
      			       	      <.hd(tList).>
				  elsif hd(tList) > t then
				      <.hd(tList).>^getLargerItems(tl(tList),t)
				  else
				      getLargerItems(tl(tList),t)
				  end,
				  
      getSmallerItems : Time-list >< Time -> Time-list
      getSmallerItems(tList, t) is if len(tList) = 0 then
      			       	      <..>
				   elsif len(tList) = 1 /\ hd(tList) <= t then
      			       	      <.hd(tList).>
				   elsif hd(tList) <= t then
				       <.hd(tList).>^getSmallerItems(tl(tList),t)
				   else
				       getSmallerItems(tl(tList),t)
				   end,
      isSorted : Time-list -> Bool
      isSorted(tList) is (all i : Nat :- i isin inds(tList) =>
     			     (all i' : Nat :- i' isin inds(tList) /\ i < i' =>
			         tList(i) <= tList(i)
			     )
     			 ),

      sort : Time-list -> Time-list
      sort(tList) is if len(tList) <= 1 then
      		       	      tList
			  else
			      sort(getSmallerItems(tl(tList), hd(tList))) ^
			      <.hd(tList).> ^
			      sort(getLargerItems(tl(tList), hd(tList)))
			  end as sortedList
      post isSorted(sortedList),

      findMaxOverlap : Time-list >< Time-list >< Int >< Time -> Int
      findMaxOverlap(sArr, sDep, n, time) is local
					           variable
				    		       curO : Int 	:= 1,
			    	    		       maxO : Int 	:= 0,
						       t    : Time 	:= time,
						       i    : Int	:= 2,
						       j    : Int	:= 1
			      			   in
						       while i < n /\ j < n do
						       	   if sArr(i) <= sDep(j) then
							       curO := curO + 1;
							       if curO > maxO then
							       	  maxO := curO;
								  t := sArr(i)
							       end;
							       i := i + 1
							   else
							       curO := curO - 1;
							       j := j + 1
							   end
						       end;
						       maxO
		              			   end
     pre isSorted(sArr) /\ isSorted(sDep)
      
  value /* observers */
     -- check whether a tram with a given name exists in a given time table
     isIn : TramId >< TimeTable -> Bool
     isIn(tId, tt) is tId isin dom(tt),

     noStopCapacityExceeded : StopsTable >< Net -> Bool
     noStopCapacityExceeded(stopsTable, n) is (all sId : StopId :- sId isin dom(stopsTable) =>
     					      	  let
						      
						      sArr = sort(arrivals(stopsTable(sId))),
						      sDep = sort(departures(stopsTable(sId))),
						      length = len(sArr),
						      t = hd(sArr)
						  in
						      findMaxOverlap(sArr, sDep, length, t) <= capacity(sId, n)
						  end
     					      ),

     noConnectionCapacityExceeded : ScheduleTable >< Net -> Bool
     noConnectionCapacityExceeded(scheduleTable, n) is (all c : ConId :- c isin dom(scheduleTable) =>
     						       	    let
								sArr = sort(arrivals(scheduleTable(c))),
								sDep = sort(departures(scheduleTable(c))),
								length = len(sArr),
								t = hd(sArr)
							    in
								findMaxOverlap(sArr, sDep, length, t) <= capacity(from(c), to(c), n)
							    end
     						       ),

     noHeadwayViolation : ConId >< Time-list >< Net -> Bool
     noHeadwayViolation(conId, tList, n) is (all i : Nat :- i isin inds(tList) =>
     					        (all i' : Nat :- i' isin inds(tList) /\ i < i' =>
					    	    tList(i') - tList(i) >= minHeadway(from(conId), to(conId),n)
					    	)
     					    )
     pre isSorted(tList),

     noHeadwayViolation : ScheduleTable >< Net -> Bool
     noHeadwayViolation(scheduleTable, n) is (all c : ConId :- c isin dom(scheduleTable) =>
     				       	         noHeadwayViolation(c, sort(departures(scheduleTable(c))),n) /\
						 noHeadwayViolation(c, sort(arrivals(scheduleTable(c))),n)
     				       	     ),

     noDrivingTimeExceeded : ScheduleTable >< Net -> Bool
     noDrivingTimeExceeded(scheduleTable, n) is (all c : ConId :- c isin dom(scheduleTable) =>
						     let
							arrs = arrivals(scheduleTable(c)),
							deps = departures(scheduleTable(c))
						     in
							 (all i : Nat :- i isin inds(arrs) /\ len(arrs) = len(deps) =>
						     	     arrs(i) - deps(i) <= minDrivingTime(from(c), to(c), n)
						     	 )
						     end    
     					     	)
						
  --value /* predicates to check time tables */
  /*
     isWellformed : TimeTable >< Net -> Bool
     isWellformed(timeTable, n) is let
				       --scheduleTable = createScheduleTable(timeTable),
				       --stopsTable = createStopsTable(timeTable)
				   in
				       noStopCapacityExceeded(stopsTable, n) /\
     		     	   	       noConnectionCapacityExceeded(scheduleTable, n) /\
			   	       noHeadwayViolation(scheduleTable, n) /\
			   	       noDrivingTimeExceeded(scheduleTable, n)
			   	   end
			   */
end  
