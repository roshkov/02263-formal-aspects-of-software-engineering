NET

scheme NETTest =
extend NET with 
class
  value	
	/* StopId values */
	s1 : StopId = "A",
	s2 : StopId = "B",
	s3 : StopId = "C",
	s4 : StopId = "D",
	s5 : StopId = "E",
	s6 : StopId = "F",
	s7 : StopId = "G",
	s8 : StopId = "H",
	s9 : StopId = "I",
	s10 : StopId = "J",
	s11 : StopId = "K",

	/* Connection values */

	/* Net values */
	emptyNet : Net = empty,
	netStops : Net = insertStop(s4, 2, insertStop(s3, 2, insertStop(s2, 3, insertStop(s1, 2, emptyNet)))),
	net : Net = addConnection(s2, s4, 2, 2, 7, addConnection(s2, s3, 2, 3, 12, addConnection(s1, s2, 1, 1, 10, netStops)))
	/*
	f1 : Family = {p1},
	f2 : Family = {p2, p3},
	f3 : Family = {p4, p5, p6},
	f4 : Family = {p7, p8, p9, p10, p11},
	fEmpty : Family = {},
	f2Rep: Family = {p2, p3},
	*/
	/* Families values */
	/*
	families : Families = {f1, f2, f3, f4},
	famSingleFamily : Families = {f4},
	famBadTable : Families = {f2},
	famBadEmptyF : Families = {f1, f2, f3, f4, fEmpty},
	famBadEmpty: Families = {},
	famBadPerRep: Families = {f2, f2Rep},
	*/
	/* Table values */
	/*
	t1 : Table = {p8, p4},
	t2 : Table = {p2, p9, p6},
	t3 : Table = {p10, p5},
	t4 : Table = {p3, p11, p1},
	t5 : Table = {p7},
	tBadRep : Table = {p1},
	tBadSameF : Table = {p2, p3},
	tGood : Table = {p1, p2, p4, p7},
	tGoodOneP : Table = {p1},
	tBadEmpty : Table = {},
	*/
	/* Plan values */
	/*
	plan : Plan = {t1, t2, t3, t4, t5},
	planBadNotAllPer : Plan = {t1, t2, t3, t4},
	planBadPerRep : Plan = {t1, t2, t3, t4, t5, tBadRep},
	planBadSameF : Plan = {tBadSameF},
	planBadEmptyTable : Plan = {t1, t2, t3, t4, t5, tBadEmpty}
	*/
	
  test_case
	/** ---- Tests for insertStop ----  **/

	/*  */
	[t101] insertStop(s1, 2, emptyNet)

	/* Test that false is returned when not every person from Families 
	have been assigned to a table. */
	--[t102] isCorrectPlan(planBadNotAllPer, families) = false,

	/* Test that false is returned when a person has been assigned to 
	multiple tables. */
	--[t103] isCorrectPlan(planBadPerRep, families) = false,
	
	/* Test that false is returned when more than one person from the
	same Family has been assigned to the same Table. */
	--[t104] isCorrectPlan(planBadSameF, famBadTable) = false,

	/* Test that false is returned when the Plan contains an empty Table. */
	--[t105] isCorrectPlan(planBadEmptyTable, families) = false,


	/** ---- Tests for isWellformedTable  ----  **/
	
	/* Test that true is returned when a correct table with one person
	from each family is passed. */
	--[t201] isWellformedTable(tGood, families) = true,

	/* Test that true is returned when a correct table with only one
	person is passed. */
	--[t202] isWellformedTable(tGoodOneP, families) = true,

	/* Test that false is returned when an incorrect empty table is
	passed. */
	--[t203] isWellformedTable(tBadEmpty, families) = false,
	
	/* Test that false is returned when an incorrect table with two
	members from the same Family is passed. */
	--[t204] isWellformedTable(tBadSameF, families) = false,


	/** ---- Tests for isWellFormed ---- **/

	/* Test that true is returned when every Person belong to a Family
	and only one and no families are empty. */
	--[t301] isWellformed(families) = true,

	/* Test that false is returned when an empty Family is part of
	Families. */
	--[t302] isWellformed(famBadEmptyF) = false,

	/* Test that false is returned when an empty Families is passed. */
	--[t303] isWellformed(famBadEmpty) = false,

	/* Test that false is returned when a Person belong to more than one
	Family in Families*/
	--[t304] isWellformed(famBadPerRep) = false,


	/** ---- Tests for areRelatives  ---- **/
	
	/* Test that true is returned when two Persons are from the same family */
	--[t401] areRelatives(p2, p3, families) = true,

	/* Test that false is returned when two Persons are from different
	families */
	--[t402] areRelatives(p1, p2, families) = false,


	/** ---- Tests for createPlanForFamily  ---- **/
	
	/* Test that when a plan is created for a single Family, that they are
	seated at an individual table. */
	--[t501] createPlanForFamily(f3) = {{p6},{p4},{p5}},


	/** ---- Tests for mergePlans  ---- **/

	/* Test that when a non-empty plan is merged with an empty, the non-empty
	plan is returned. */
	--[t601] mergePlans({{p6},{p4},{p5}}, {{}}) = {{p6},{p4},{p5}},

	/* Test that when two non-empty equally sized plans are merged, that only
	tables from different plans are merged. */
	--[t602] mergePlans({{p6},{p4},{p5}}, {{p1},{p2},{p3}})
	--       = {{p6, p1},{p4, p2},{p5, p3}},

	/* Test that when two non-empty plans, when one plan is 1 bigger than the
	other, are merged correctly. */
	--[t603] mergePlans(createPlanForFamily(f1),createPlanForFamily(f2))
	--       = {{p1, p3},{p2}},

	/* Test that when two non-empty plans, when one plan is 1 bigger than the
	other, are merged correctly. */
	--[t604] mergePlans(createPlanForFamily(f2),createPlanForFamily(f1))
	--       = {{p3, p1},{p2}},

	/* Test that when two non-empty plans, when one plan is >1 bigger than the
	other, are merged correctly. */
	--[t605] mergePlans(createPlanForFamily(f1),createPlanForFamily(f3))
	--       = {{p1, p6},{p4},{p5}},

	/* Test that when two non-empty plans, when one plan is >1 bigger than the
	other, are merged correctly. */
	--[t606] mergePlans(createPlanForFamily(f3),createPlanForFamily(f1))
	--       = {{p6, p1},{p4},{p5}},


	/** ---- Tests for createPlanForFamilies  ---- **/
	
	/* Test that when a plan is created for a single Family in Families, that
	they are seated at an individual table. */
	--[t701] createPlanForFamilies(famSingleFamily)
	--       = {{p7}, {p8}, {p9}, {p10}, {p11}},

	/* Test that when a plan is created for two Family of same size in Families. */
	--[t702] createPlanForFamilies(families)
	--       = {{p1, p3, p6, p11}, {p2, p5, p9}, {p4, p7}, {p10}, {p8}},


	/** ---- Tests for plan  ---- **/

	/* Test that when a wellformed Families is passed a correct plan is generated. */
	--[t801] plan(families)
	--       = {{p1, p3, p6, p11}, {p2, p5, p9}, {p4, p7}, {p10}, {p8}},

	/* Test that when a non-wellformed Families is passed the precondition fails. */
	--[t802] plan(famBadPerRep)

 end
 
