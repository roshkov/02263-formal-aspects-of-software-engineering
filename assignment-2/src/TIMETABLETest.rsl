TIMETABLE

scheme TIMETABLETest =
extend TIMETABLE with 
class
  value
    /* TramId values */
    t1 : TramId = "tram1",
    t2 : TramId = "tram2",
	
    /* TimeTable values */
    timeTableTramsOnly : TimeTable = addTram(t2, addTram(t1, empty)),
    timeTable : TimeTable = addStop(t2, "D", 58, 60,
    	      		    addStop(t2, "B", 47, 50,
			    addStop(t2, "A", 28, 32,
			    addStop(t2, "B", 11, 13,
			    addStop(t2, "D", 0, 2,
			    addStop(t1, "A", 59, 60,
			    addStop(t1, "B", 46, 48,
			    addStop(t1, "C", 28, 32,
			    addStop(t1, "B", 12, 14,
			    addStop(t1, "A", 0, 1, timeTableTramsOnly)))))))))),
    invalidArrDepTimeTable : TimeTable = addStop(t1, "B", 14, 12,
    			     	       	 addStop(t1, "A", 1, 0, timeTableTramsOnly)),
    invalidStopsConnNetTimeTable : TimeTable = addStop(t1, "C", 28, 32,
    				   	       addStop(t1, "A", 1, 0, timeTableTramsOnly)),	
    timeSlotSingleA : TimeSlot = mk_TimeSlot("A", 0, 1),
    timeSlotSingleB : TimeSlot = mk_TimeSlot("B", 0, 1),
    emptyPlanStops : PlanStops = [],
    planConnTest : PlanConns = [mk_ConnId("C","B") +> mk_PlanSlots(<.32.>,<.46.>),
    		   	        mk_ConnId("A","B") +> mk_PlanSlots(<.32,1.>,<.47,12.>),
				mk_ConnId("D","B") +> mk_PlanSlots(<.2.>,<.11.>),
				mk_ConnId("B","D") +> mk_PlanSlots(<.50.>,<.58.>),
				mk_ConnId("B","C") +> mk_PlanSlots(<.14.>,<.28.>),
				mk_ConnId("B","A") +> mk_PlanSlots(<.13,48.>,<.28,59.>)],
    planStopTest : PlanStops = ["B" +> mk_PlanSlots(<.11,47,12,46.>,<.13,50,14,48.>),
    		   	        "D" +> mk_PlanSlots(<.0,58.>,<.2,60.>),
				"C" +> mk_PlanSlots(<.28.>,<.32.>),
				"A" +> mk_PlanSlots(<.28,0,59.>,<.32,1,60.>)],
    planStopCapacityExceeded : PlanStops = ["A" +> mk_PlanSlots(<.0,0,0.>,<.10,9,8.>),
    			       		    "B" +> mk_PlanSlots(<.0.>,<.13.>),
					    "C" +> mk_PlanSlots(<.1.>,<.13.>)],
    planConnCapacityExceeded : PlanConns = [mk_ConnId("A", "B") +> mk_PlanSlots(<.1,2,3,4.>,<.1,9,8,7.>),
    			       		    mk_ConnId("B", "A") +> mk_PlanSlots(<.1,1,0,4.>,<.1,1,8,5.>)],
    planConnHeadwayViolation : PlanConns = [mk_ConnId("A", "B") +> mk_PlanSlots(<.1,1,0,4.>,<.1,1,8,5.>)],
    planConnDrivingExceeded : PlanConns = [mk_ConnId("D", "B") +> mk_PlanSlots(<.1,2,3.>,<.100,50,3.>)],	
	
    /* StopId values */
    s1 : StopId = "A",
    s2 : StopId = "B",
    s3 : StopId = "C",
    s4 : StopId = "D",

    /* Net values */
    emptyNet : Net = empty,
    netStops : Net = insertStop(s4, 2,
    	       	     insertStop(s3, 2,
		     insertStop(s2, 3,
		     insertStop(s1, 2, emptyNet)))), 
    net : Net = addConnection(s2, s4, 2, 2, 7,
    	      	addConnection(s2, s3, 2, 3, 12,
		addConnection(s1, s2, 1, 1, 10, netStops)))

  test_case

    /** ---- GENERATORS ---- **/

    /** ---- Tests for addTram ----  **/

    /*  Test that tram1 and tram2 are inserted in the TimeTable */
    [t100] addTram(t2, addTram(t1, empty)) = ["tram1" +> <..>, "tram2" +> <..>],

    /*  Test that a duplicate tram can not be inserted in the TimeTable */
    [t101] addTram(t1, addTram(t2, addTram(t1, empty))) = ["tram1" +> <..>, "tram2" +> <..>],

    /** ---- Test for addStop  ---- **/

    /* Test that a stop has been added to the TimeTable */
    [t200] addStop(t1, "A", 0, 1, addTram(t1, empty)) = ["tram1" +> <.mk_TimeSlot("A",0,1).>],

    /* Test that a duplicate stop has been added to the TimeTable */
    [t201] addStop(t1, "A", 0, 1, (addStop(t1, "A", 0, 1, addTram(t1, empty)))) =
    	   ["tram1" +> <.mk_TimeSlot("A",0,1),mk_TimeSlot("A",0,1).>],

    /** ---- Tests for createPlanConns ---- **/

    /* Test that a valid PlanConns has been generated */
    [t600] createPlanConns(timeTable) = planConnTest,

    /* Test that a PlanConns with invalid arrival and departures times has been generated */
    [t601] createPlanConns(invalidArrDepTimeTable) =
    	   [mk_ConnId("A","B") +> mk_PlanSlots(<.0.>,<.14.>)],

    /* Test that a PlanConns with invalid stopsConn for the Net has been generated */
    [t602] createPlanConns(invalidStopsConnNetTimeTable) =
    	   [mk_ConnId("A","C") +> mk_PlanSlots(<.0.>,<.28.>)],

    /** ---- Tests for insertPlanSlot (PlanStops) ---- **/

    /* Test that a valid scheduleStop has been generated after insert a PlanSlot in an empty 
    PlanStops */
    [t700] insertPlanSlot(timeSlotSingleA, emptyPlanStops) =
    	   ["A" +> mk_PlanSlots(<.0.>, <.1.>)],

    /* Test that a valid scheduleStop has been generated after insert a PlanSlot with different 
    stopId in a PlanStops */
    [t701] insertPlanSlot(timeSlotSingleB, insertPlanSlot(timeSlotSingleA, emptyPlanStops)) =
    	   ["A" +> mk_PlanSlots(<.0.>, <.1.>), "B" +> mk_PlanSlots(<.0.>, <.1.>)],

    /* Test that a valid scheduleStop has been generated after insert a PlanSlot with the same 
    stopId in a PlanStops */
    [t702] insertPlanSlot(timeSlotSingleA, insertPlanSlot(timeSlotSingleA, emptyPlanStops)) =
    	   ["A" +> mk_PlanSlots(<.0, 0.>, <.1, 1.>)],

    /** ---- Tests for createPlanStops ---- **/

    /* Test that a valid PlanStops has been generated */
    [t1000] createPlanStops(timeTable) = planStopTest,

    /* Test that a PlanStops with invalid arrival and departures times has been generated */
    [t1001] createPlanStops(invalidArrDepTimeTable) =
    	    ["A" +> mk_PlanSlots(<.1.>,<.0.>), "B" +> mk_PlanSlots(<.14.>,<.12.>)],

    /* Test that an empty PlanStops is returned from an empty TimeTable */
    [t1002] createPlanStops(empty) = [],

    /** ---- OBSERVERS  ---- **/

    /** ---- Tests for isIn ---- **/
	
    /* Test that true is returned when a tram is in the domain of the TimeTable */
    [t1100] isIn(t1, timeTable) = true,

    /* Test that false is returned when a tram is not in the domain of the TimeTable */
    [t1101] isIn("tram3", timeTable) = false,

    /** ---- Tests for isInPlan (PlanStops) ---- **/

    /* Test that true is returned if the stopId is in the domain of the PlanStops of the TimeTable */
    [t1200] isInPlan("A", createPlanStops(timeTable)) = true,

    /* Test that false is returned if the stopId is not in the domain of the PlanStops of the 
    TimeTable */
    [t1201] isInPlan("E", createPlanStops(timeTable)) = false,

    /* Test that false is returned if the domain of PlanStops of the TimeTable is empty */
    [t1202] isInPlan("A", emptyPlanStops) = false,

    /** ---- Tests for isInPlan (PlanConns) ---- **/

    /* Test that true is returned if the connId is in the domain of the PlanConns of the TimeTable */
    [t1300] isInPlan(mk_ConnId("A","B"), createPlanConns(timeTable)) = true,

    /* Test that true is returned if the connId is not in the domain of the PlanConns of the TimeTable */
    [t1301] isInPlan(mk_ConnId("A","D"), createPlanConns(timeTable)) = false,

    /* Test that false is returned if the domain of PlanConns of the TimeTable is empty */
    [t1302] isInPlan(mk_ConnId("A","B"), []) = false,

    /** ---- Tests for findMaxCapacityRec ---- **/
    /*  */

    /** ---- Tests for findMaxCapacity ---- **/
    /* Test that the max capacity is 2 when exists an overlap between two trams*/
    [t1500] findMaxCapacity(<.1,7.>, <.12,15.>) = 2,

    /* Test that the max capacity is 1 when does not exist an overlap */
    [t1501] findMaxCapacity(<.1,13.>, <.12,15.>) = 1,

    /* Test that the max capacity is 1 when a tram arrives and another leaves at the same time */
    [t1502] findMaxCapacity(<.1,12.>, <.12,15.>) = 1,

    /* Test that the max capacity is 3 when all trams schedules are overlap */
    [t1503] findMaxCapacity(<.1, 1, 1.>, <.7, 6, 5.>) = 3,

    /** ---- Tests for getLargerItems ---- **/

    /* Test that the numbers returned are larger than 34 */
    [t1600] getLargerItems(<.34,123,6,1,685.>, 34) = <.123, 685.>,

    /** ---- Tests getSmallerItems  ---- **/

    /* Test that the numbers returned are equal or smaller than 34 */
    [t1700] getSmallerItems(<.34,123,6,1,685.>, 34) = <.34, 6, 1.>,

    /** ---- Tests for sort ---- **/

    /* Test that the numbers returned are in increasing order  */
    [t1800] sort(<.34,123,6,1,685,34, 35.>)= <.1,6,34,34,35,123,685.>,

    /** ---- Tests for isSorted ---- **/

    /* Test that true is returned if the Time-list is sorted in increasing order */
    [t1900] isSorted(<.1,6,6,34.>) = true,

    /* Test that false is returned if the Time-list is sorted in decreasing order */
    [t1901] isSorted(<.34,6,1.>) = false,

    /* Test that false is returned if the Time-list is unsorted (in increasing order) */
    [t1902] isSorted(<.6,1,34.>) = false,

    /* Test that true is returned if the Time-list is empty */
    [t1903] isSorted(<..>) = true,

    /** ---- PREDICATES ---- **/

    /** ---- Tests for hasCorrectTimes (Plan) ---- **/
	
    /* Test that true is returned for an empty Plan  */
    [t2000] hasCorrectTimes(timeTableTramsOnly) = true,

    /* Test that true is returned if the arrival is before or equal than the departure time for all 
    the Time-Slots in the Plan */
    [t2001] hasCorrectTimes(timeTable("tram1")) = true,

    /** ---- Tests for hasCorrectTimes (TimeTable) ---- **/
	
    /* Test that true is returned if the arrival is before or equal than the departure time for all 
    the Time-Slots in the Plan */
    [t2100] hasCorrectTimes(timeTable) = true,

    /* Test that false is returned if the arrival is after the departure time in any Time-Slots in 
    the Plan */
    [t2101] hasCorrectTimes(invalidArrDepTimeTable) = false,

    /** ---- Tests for allStopsInNet ---- **/

    /* Test that true is returned if all the Stops from the Plan are in the Net */
    [t2200] allStopsInNet(planStopTest, net) = true,

    /* Test that false is returned if any Stops from the Plan is not in the Net */
    [t2201] allStopsInNet(["F" +> mk_PlanSlots(<.11,47.>, <.13,50.>)], net) = false,

    /* Test that false is returned if the Net is Empty (not PlanStops) */
    [t2202] allStopsInNet(planStopTest, empty) = false,

    /* Test that true is returned if only the PlanStops is Empty */
    [t2203] allStopsInNet(emptyPlanStops, net) = true,

    /* Test that true is returned if the PlanStops and the Net are Empty */
    [t2204] allStopsInNet(emptyPlanStops, empty) = true,

    /** ---- Tests for noIndirectConnections ---- **/

    /* Test that true is returned if the connections in the PlanConns are not connected to themself 
    in the net */
    [t2300] noIndirectConnections(createPlanConns(timeTable), net) = true,

    /* Test that true is returned if any connection in the PlanConns are not connected to themself 
    in the net */
    [t2301] noIndirectConnections([mk_ConnId("A","A") +> mk_PlanSlots(<.32.>,<.46.>)], net) = false,

    /** ---- Tests for noStopCapacityExceeded ---- **/

    /* Test that true is returned if the stop capacity is not exceeded */
    [t2400] noStopCapacityExceeded(createPlanStops(timeTable), net) = true,

    /* Test that false is returned if the stop capacity is exceeded */
    [t2401] noStopCapacityExceeded(planStopCapacityExceeded, net) = false,

    /* Test that true is returned if the planStops is Empty */
    [t2402] noStopCapacityExceeded(emptyPlanStops, net) = true,

    /** ---- Tests for noConnectionCapacityExceeded ---- **/

    /* Test that true is returned if the connections capacity is not exceeded */
    [t2500] noConnectionCapacityExceeded(createPlanConns(timeTable), net) = true,

    /* Test that false is returned if the connection capacity is exceeded */
    [t2501] noConnectionCapacityExceeded(planConnCapacityExceeded, net) = false,

    /* Test that true is returned if the planConns is Empty */
    [t2502] noConnectionCapacityExceeded([], net) = true,

    /** ---- Tests for noHeadwayViolation (connId) ---- **/

    /* Test that true is returned if the headway is not violated */
    [t2600] noHeadwayViolation(mk_ConnId("A", "B"),
			       sort(arrivals(createPlanConns(timeTable)(mk_ConnId("A", "B")))),
			       net) = true,

    /* Test that false is returned if the headway is violated */
    [t2601] noHeadwayViolation(mk_ConnId("A", "B"),
			       sort(arrivals(planConnHeadwayViolation(mk_ConnId("A", "B")))),
			       net) = false,

    /** ---- Tests for noHeadwayViolation (PlanConns)---- **/

    /* Test that true is returned if the headway is not violated */
    [t2700] noHeadwayViolation(planConnTest, net) = true,

    /* Test that false is returned if the headway is violated */
    [t2701] noHeadwayViolation(planConnHeadwayViolation, net) = false,

    /** ---- Tests for noDrivingTimeExceeded ---- **/

    /* Test that true is returned if the drivingTime is not exceeded */
    [t2800] noDrivingTimeExceeded(planConnTest, net) = true,

    /* Test that false is returned if the drivingTime is exceeded */
    [t2801] noDrivingTimeExceeded(planConnDrivingExceeded, net) = false,

    /** ---- Tests for isWellformed ---- **/

    /* Test that true is returned if a TimeTable is well formed */
    [t2900] isWellformed(timeTable, net) = true,

    /* Test that false is returned if a TimeTable has a wrong arrival-departure time, i.e., arrives 
    after departure */
    [t2901] isWellformed(invalidArrDepTimeTable, net) = false,

    /* Test that false is returned if a TimeTable has connections in the timeTable which are not in 
    the net */
    [t2902] isWellformed(invalidStopsConnNetTimeTable, net) = false

 end